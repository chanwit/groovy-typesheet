ant.property(file:'build.properties')

version = ant.project.properties.version
testcase = ant.project.properties.test

groovyHome = System.getenv().'GROOVY_HOME'
antlibXMLns = 'antlib:org.apache.maven.artifact.ant'

sourceDir='src/'
testSourceDir='test/'

outDir				='target/'
binDir				=outDir + 'classes/'
testBinDir			=outDir + 'test-classes/'
testReportsDir		=outDir + 'test-reports/'
coberturaBinDir		=outDir+ 'cobertura-classes/'
coberturaReportDir	=outDir+ 'cobertura-reports/'

distDir='dist/'

ant.path ( id : 'compileJarSet' ) {
  fileset ( dir : groovyHome + '/lib' , includes : 'groovy*.jar' )
  fileset ( dir : groovyHome + '/lib' , includes : 'commons-cli*.jar' )
  fileset ( dir : groovyHome + '/lib' , includes : 'asm*.jar' )
  // Picks up antlr as well as ant. This is intended.
  fileset ( dir : groovyHome + '/lib' , includes : 'ant-*.jar' )

  // local lib
  fileset ( dir : './lib'  , includes : 'ant*.jar' )
    fileset ( dir : './lib' , includes : 'stringtemplate*.jar')
}

ant.path ( id : 'testJarSet' ) {
    path ( refid : 'compileJarSet' )
    fileset ( dir : groovyHome + '/lib' , includes : 'junit*.jar' )
}

doCompile = { classpathRef, srcDir, destDir ->
    // define groovy task
    ant.taskdef(name : 'groovyc' ,
                classname: 'org.codehaus.groovy.ant.Groovyc' ,
                classpathref: classpathRef)

    // generate ANTLR parser
    ant.java(classname: 'org.antlr.Tool', fork: true) {
        arg(value: srcDir + 'Typesheet.g')
        arg(value: "-fo")
        arg(value: "src/org/codehaus/groovy/typesheet/parser")
        classpath {
            path ( refid : classpathRef )
        }
    }

    // compile source
    ant.groovyc(srcdir: srcDir,
                destdir: destDir,
                fork: 'false',
                failonerror: 'true') {
        classpath {
            pathelement ( location : binDir )
            pathelement ( location : testBinDir )
            path ( refid : classpathRef )
        }
        javac(source : '1.5' , target : '1.5' , debug : 'on')
    }
}

doTesting = { classpathRef ->
  if (usingCobertura) {
    ant.mkdir ( dir : coberturaBinDir )
    ant.mkdir ( dir : coberturaReportDir )
    ant."${antlibXMLns}:dependencies" ( pathId :  'coberturaPathId' ) {
        dependency ( groupId : 'net.sourceforge.cobertura' , artifactId : 'cobertura' , version : '1.9' )
        // dependency ( groupId : 'org.antlr' , artifactId : 'antlr' , version : '3.0.1' )
    }
    ant.taskdef ( resource : 'tasks.properties' , classpathref : 'coberturaPathId' )
    ant.'cobertura-instrument' ( todir : coberturaBinDir ) {
        fileset ( dir : binDir )
    }
  }

  ant.junit ( printsummary : 'yes' , failureproperty : 'testsFailed' , fork : 'true' ) {
    formatter ( type : 'plain' )
    batchtest ( todir : testReportsDir ) {
      def includeNames = '**/*Tests.class'
      if( testcase != null ) {
        includeNames = "**/${testcase}Tests.class"
      }
      fileset ( dir : testBinDir, includes : includeNames , excludes : '**/ant/tests/*' )
    }
    classpath {
    if( usingCobertura ) {
        // MUST appear in classpath before the uninstrumented classes.
        pathelement ( location : coberturaBinDir )
        path ( refid : 'coberturaPathId' )
    }
      pathelement ( location : binDir )
      pathelement ( location : testBinDir )
      path ( refid : classpathRef )
    }
  }

  if ( usingCobertura ) {
      ant.'cobertura-report' ( srcdir : sourceDir , destdir : coberturaReportDir )
  }
}

includeTargets << gant.targets.Clean
cleanPattern <<  [ '**/*~' , 'cobertura.ser' ]
cleanDirectory << binDir
cleanDirectory << testBinDir
// cleanDirectory << 'lib'

target(dist: 'Make a distribution') {
  // TODO
}

target(prepare: 'Prepare directories') {
  echo('Preparing directories')
  mkdir(dir: binDir)
  mkdir(dir: testBinDir)
  mkdir(dir: testReportsDir)
}

target(compile: 'Compiling Groovy Typesheet') {
  depends(prepare)
  echo("Compiling Groovy Typesheet v.${version}")
  doCompile('compileJarSet', sourceDir, binDir)
}

target(compileTests: 'Compiling Tests') {
  depends(compile)
  echo('Tests')
  doCompile('testJarSet', testSourceDir, testBinDir)
}

target(test:'Perform tests') {
  usingCobertura = false
  depends(compileTests)
  doTesting('testJarSet')
}

target(gunit:'Perform gunit') {
    depends(compile)
    def tests=[testcase]

    if(testcase==null)
        tests = ['Typesheet', 'Ast']

    tests.each { t ->
        ant.echo("testing " + t + ".testsuite")
        ant.java(classname: 'org.antlr.gunit.Interp', fork: true) {
            arg(value: testSourceDir + "/" + t + ".testsuite")
            classpath {
                pathelement ( location : binDir )
                pathelement ( location : testBinDir )
                path ( refid : 'compileJarSet' )
            }
        }
    }
}

target(coverage:'Coverate tests') {
  usingCobertura = true
  depends(compileTests)
  doTesting('testJarSet')
}

target(run:'Test run') {
    depends(compile)
    ant.java(classname:'org.codehaus.groovy.typesheet.parser.Main') {
        arg(value: testSourceDir + '/ex01.gts')
        classpath {
            pathelement ( location : binDir )
            pathelement ( location : testBinDir )
            path ( refid : 'compileJarSet' )
        }
    }
}


setDefaultTarget(test)